# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: "Amazon SageMaker Studio secure deployment demo. The deployment creates all necessary network infrastructure and SageMaker Studio domain."

Parameters:
  ProjectName:
    Type: String
    Default: sagemaker-studio-vpc-firewall
  DomainName:
    Description: SageMaker domain name
    Type: String
    Default: sagemaker-anfw-domain
  UserProfileName:
    Description: User profile name for the SageMaker domain
    Type: String
    Default: anfw-user-profile
  VPCCIDR:
    Type: String
    Default: 10.2.0.0/16
  FirewallSubnetCIDR:
    Type: String
    Default: 10.2.1.0/24
  NATGatewaySubnetCIDR:
    Type: String
    Default: 10.2.2.0/24
  SageMakerStudioSubnetCIDR:
    Type: String
    Default: 10.2.3.0/24
  PublicS3Bucket:
     Type: String
     Default: 's3://ee-assets-prod-us-east-1/modules/75e5dde6cf204eedb24191ad8240656f/v1/coco_dataset'
     Description: Public S3 bucket for coco dataset

Resources:

  # IAM SageMaker Execution role and KMS key for EBS encryption
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ProjectName: !Ref ProjectName
      TemplateURL: iam.yaml

  # S3 buckets (data, model) and bucket policies, KMS key for bucket encryption
  #S3:
  #  Type: AWS::CloudFormation::Stack
  #  Properties:
  #    Parameters:
  #      ProjectName: !Ref ProjectName
  #      DataBucketName: !GetAtt VPC.Outputs.DataBucketName
  #      ModelBucketName: !GetAtt VPC.Outputs.ModelBucketName
  #    TemplateURL: s3.yaml

  # VPC with Firewall Network, Nat Gateway, and a private subnet for SageMaker deployment
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ProjectName: !Ref ProjectName
        VPCCIDR: !Ref VPCCIDR
        FirewallSubnetCIDR: !Ref FirewallSubnetCIDR
        NATGatewaySubnetCIDR: !Ref NATGatewaySubnetCIDR
        SageMakerStudioSubnetCIDR: !Ref SageMakerStudioSubnetCIDR
      TemplateURL: vpc.yaml
  
  # SageMaker domain, user profile and pre-signed URL
  SageMakerStudio:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DomainName: !Sub ${DomainName}-${AWS::Region}
        UserProfileName: !Sub ${UserProfileName}-${AWS::Region}
        ProjectName: !Ref ProjectName
        VPCId: !GetAtt VPC.Outputs.VPCId
        SageMakerStudioSubnetIds: !GetAtt VPC.Outputs.SageMakerStudioSubnetId
        SageMakerSecurityGroupIds: !GetAtt VPC.Outputs.SageMakerSecurityGroupId
        SageMakerExecutionRoleArn: !GetAtt IAM.Outputs.ExecutionRoleArn
      TemplateURL: sagemaker-studio.yaml
      
  S3LinkedLustreFS:
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: "LUSTRE"
      StorageCapacity: 1200
      SubnetIds: [!GetAtt VPC.Outputs.SageMakerStudioSubnetId]
      SecurityGroupIds: [!GetAtt VPC.Outputs.SageMakerSecurityGroupId]
      Tags:
        - Key: "Name"
          Value: "TF-DDP-Workshop"
      LustreConfiguration:
        AutoImportPolicy: "NEW"
        CopyTagsToBackups: true
        DeploymentType: "PERSISTENT_1"
        PerUnitStorageThroughput: 200
        DataCompressionType: "NONE"
        ImportPath: !Sub s3://sagemaker-${AWS::Region}-${AWS::AccountId}
        ExportPath: !Sub s3://sagemaker-${AWS::Region}-${AWS::AccountId}/.
  
  Cloud9Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
            - s3.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
      
  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: Cloud9Role
      
  Cloud9:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    DependsOn: 
     - Cloud9BootstrapAssociation
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: 'Cloud9 IDE'
      AutomaticStopTimeMinutes: 120
      ImageId: amazonlinux-2-x86_64
      InstanceType: t3.medium
      Tags: 
        - 
          Key: SSMBootstrap
          Value: !Sub 
            - ${AWS::StackName}-${RANDOM}
            - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]

  Cloud9BootstrapAssociation: 
    Type: AWS::SSM::Association
    Properties: 
      Name: !Ref Cloud9SSMDocument
      Targets:
        - Key: tag:SSMBootstrap
          Values:
          - !Sub
            - ${AWS::StackName}-${RANDOM}
            - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]
            
  Cloud9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: C9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash"
            - !Sub aws s3 sync ${PublicS3Bucket}/train s3://sagemaker-${AWS::Region}-${AWS::AccountId}/coco_dataset/train/ 
            - !Sub aws s3 sync ${PublicS3Bucket}/model s3://sagemaker-${AWS::Region}-${AWS::AccountId}/coco_dataset/model/ 
            - !Sub aws s3 sync ${PublicS3Bucket}/annotations s3://sagemaker-${AWS::Region}-${AWS::AccountId}/coco_dataset/annotations/
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - LambdaExecutionRole-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"
  
  Cloud9BootstrapInstanceLambda:
    Type: Custom::Cloud9BootstrapInstanceLambda
    DependsOn:
    - LambdaExecutionRole
    - LogGroupCloud9BootstrapInstanceLambdaFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - Cloud9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9
      LabIdeInstanceProfileName:
        Ref: Cloud9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - Cloud9InstanceProfile
        - Arn

  Cloud9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      MemorySize: 256
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          
          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}
          
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
          
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))
          
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
          
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))
          
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')
  
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
  

  LogGroupCloud9BootstrapInstanceLambdaFunction:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Cloud9BootstrapInstanceLambdaFunction}
      RetentionInDays: 7

Outputs:
  VPCId:
    Description: The ID of VPC where SageMaker Studio will reside
    Value: !GetAtt VPC.Outputs.VPCId
  S3VPCEndpointId: 
    Description: The ID of the S3 VPC endpoint
    Value: !GetAtt VPC.Outputs.S3VPCEndpointId
  SageMakerStudioSubnetId:
    Description: The ID of the SageMaker subnet
    Value: !GetAtt VPC.Outputs.SageMakerStudioSubnetId
  SageMakerStudioSecurityGroupId:
    Description: The ID the SageMaker security group
    Value: !GetAtt VPC.Outputs.SageMakerSecurityGroupId
  SageMakerExecutionRoleArn:
    Description: IAM Execution role for SageMaker Studio and SageMaker notebooks
    Value: !GetAtt IAM.Outputs.ExecutionRoleArn
  SageMakerStudioDomainId:
    Description: SageMaker Studio domain id
    Value: !GetAtt SageMakerStudio.Outputs.SageMakerStudioDomainId
  UserProfileName:
    Description: SageMaker user profile name
    Value: !GetAtt SageMakerStudio.Outputs.UserProfileName
  FileSystemId:
    Description: FSx Lustre FS ID
    Value: !Ref S3LinkedLustreFS
  


  
